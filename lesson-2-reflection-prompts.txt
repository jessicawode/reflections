What happens when you initialize a repository? Why do you need to do it?

Git sets up the apparatus necessary to start tracking changes to your files.
You need to do this if you want to be able to compare versions and view earlier
versions.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is the space between the working directory and the repository.
It shows an intention to move something out of the working directory and commit
it, but it provides an opportunity to back out before changes are actually
committed.

How can you use the staging area to make sure you have one commit per logical
change?

By viewing the differences between the file you're about to commit and the
latest version, you can ensure that there is only one logical change being
committed.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches are helpful when working on a different version of a program, so you
can continue working on the standard version as well. Branches would keep the
changes to each version separate.

How do the diagrams help you visualize the branch structure?

They illustrate which commits are related to one another and in what way.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

Merging brings together all the changes made on both branches into a single
version of the code. We represent it the way we do to show where the code was
last in common, and when all the changes from both branches were included again.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

If the differences can be easily identified, Git will do the work for you. It's
possible it might get it wrong, but it has a built-in guard against that. The
automatic merging will save you a lot of time.
